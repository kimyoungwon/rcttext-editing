# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
tokens_select
?tokens_select
?corpus_sample
?strata
?cluster
?corpus_sample
devtools::document()
# Install package to see if it works - don't need to run this every time
setwd("..")
devtools::install("tada")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
setwd("tada")
devtools::document()
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
?meta
?wordEmbed
library(softmaxreg)
?wordEmbed
?read.csv
?dir.create
?dir_create
?docvars
?pivot_wider
library(dply)
library(dplyr)
?merge
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
library(textreg)
?textreg
?plot.textreg.result
?find.threshold.C
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
library(devtools)
library(roxygen2)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
?ReferenceManual(
)
?Rd2md::ReferenceManual
?Rd2pdf::ReferenceManual
?Rdconv
system("R CMD Rd2conv . --output=./manual.tex --force")
system("R CMD Rdconv . --output=./manual.tex --force")
system("R CMD Rdconv . --output=./manual.tex --type="latex"")
system("R CMD Rdconv . --output=./manual.tex --type="latex")
system("R CMD Rdconv . --output=./manual.tex --type="latex" ")
system("R CMD Rdconv . --output=./manual.tex --type=latex)
""
_
)
""
system("R CMD Rdconv . --output=./manual.tex --type=latex")
system("R CMD Rdconv --type=latex")
system("R CMD Rdconv . --type=latex")
system("R CMD Rdconv . --output=./manual.tex --type='latex'")
system("R CMD Rdconv . --output=./manual.tex --type='latex' --force")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
# Create PDF manual
system("R CMD Rdconv . --type='latex' --force")
# Create PDF manual
system("R CMD Rdconv --type='latex' --force")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-clean")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --internals")
?Rd2
?Rd2pdf
?list.files
list.files(all.files=T)
list.files(all.files=T,pattern=glob2rx(".Rd2pdf"))
list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
src.file
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
library(quanteda)
library(quanteda.textstats)
?textstat_lexdiv
?textstat_readability
library(devtools)
library(roxygen2)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
devtools::document()
usethis::use_package("sampling", "imports")
usethis::use_package("quanteda.textstats","imports")
usethis::use_package("quanteda.dictionaries","imports")
usethis::use_package("lexicon", "imports")
install.packages("lexicon")
usethis::use_package("lexicon", "imports")
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
tex.dir
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
devtools::document()
devtools::document()
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
devtools::document()
devtools::document()
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("progress", "imports")
devtools::document()
devtools::document()
devtools::document()
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
install.packages("progressw")
library(tada)
?tada
??tada
?estimate_impacts
library(devtools)
library(roxygen2)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
# Install package to see if it works - don't need to run this every time
setwd("..")
devtools::install("tada")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
devtools::document()
g
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
library(devtools)
library(roxygen2)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force --no-index --no-clean")
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("tada")
devtools::document()
tex.dir=list.files(all.files=T,pattern=glob2rx(".Rd2pdf*"))
src.file = paste0(tex.dir,"/Rd2.tex")
file.copy(src.file, "manual.tex", overwrite = T)
system(paste0("rm -Rf ", tex.dir))
library(caret)
?caret::preProcess
library(quanteda.textstats)
?textstat_readability
?textstat_lexdiv
x="Flesch","Flesch.Kincaid", "ARI", "ELF","DRP",
"Coleman"
"meanWordSyllables"
x=c("Flesch","Flesch.Kincaid", "ARI", "ELF","DRP",
"Coleman"
"meanWordSyllables")
x=c("Flesch","Flesch.Kincaid", "ARI", "ELF","DRP",
"Coleman",
"meanWordSyllables")
sort(x)
paste0(sort(x),collapse=", ")
paste0(sort(x),collapse="//', //'")
paste0(sort(x),collapse="//', //'/")
paste0(sort(x),collapse="//'/, //'/")
paste0(sort(x), collapse=", "
)
paste0("\\",sort(x), collapse=", ")
paste0("\\'",sort(x), collapse=", ")
paste0("'",sort(x), collapse=", ")
paste0("'",sort(x),";" collapse=", ")
paste0("'",sort(x),"'" collapse=", ")
paste0("'",sort(x),"\'" collapse=", ")
paste0("'",sort(x),"\'" )
paste0(paste0("'",sort(x),"\'" ),collapse=",")
?preProcess
?p.adjust
?p.adjust
mild = c(16,13,12,15,11,12,
14,16,17,15,13,17,
15,13,12,14,13,10)
severe = c(14,10,11,12,6,8,
13,7,3,10,4,2,
15,13,11,7,9,14)
therapy = c(rep("Desensitization",6),rep("Implosion",6),rep("Insight",6))
dat = data.frame(therapy=rep(therapy,2),
severity=c(rep("mild",18),
rep("severe",18)),
response=c(mild,severe))
dat$therapy=as.factor(dat$therapy)
dat$severity=as.factor(dat$severity)
summary(mod <- aov(response ~ therapy*severity, data=dat))
library(agricolae)
HSD.test(mod, c("therapy","severity"),group=F,console=T)
library(agricolae)
out=HSD.test(mod, c("therapy","severity"),group=F,console=F)
options(digits=2)
out$comparison[,1:3]
TukeyHSD(mod,c("therapy","severity"))
TukeyHSD(mod)
str(TukeyHSD(mod))
str(TukeyHSD(mod)$therapy:severity)
str(TukeyHSD(mod)$`therapy:severity`)
str(TukeyHSD(mod)$`therapy:severity`$`p adj`)
str(TukeyHSD(mod)$`therapy:severity`[,4])
TukeyHSD(mod)$`therapy:severity`[,4]
table(TukeyHSD(mod)$`therapy:severity`[,4]<=0.05)
direct = c(39, 41, 34,  # Direct, Instructor 1
40, 42, 44, # Direct, Instructor 2
37, 38, 35) # Direct, Instructor 3
project= c(41, 39, 43, # Instructor 1
47, 41, 44,  # Instructor 2
40, 40, 43) # Instructor 3
inquiry = c(48, 46, 44,  # Instructor 1
40, 48, 44,  # Instructor 2
40, 42, 43) # Instructor 3
instructor = as.factor(rep(rep(1:3,each=3),3))
rating = c(direct, project, inquiry)
strategy = c(rep("Direct", 9), rep("Project-based",9), rep("Inquiry-based", 9))
dat9 = data.frame(instructor, strategy, rating)
mod1=aov(rating~strategy,data=dat9)
summary(mod1)
str(dat9)
dat9$strategy=as.factor(dat9$strategy)
mod1=aov(rating~strategy,data=dat9);summary(mod1)
mod2=aov(rating~strategy+instructor,data=dat9);summary(mod2)
mod2=aov(rating~strategy*instructor,data=dat9);summary(mod2)
library(lmerTest)
mod3 = lmer(rating ~ strategy + (1|instructor), data=dat9); summary(mod3)
mod3=aov(rating ~ strategy + Error(strategy/instructor),data=dat9)
summary(mod3)
mod3=aov(rating ~ strategy + Error(instructor/strategy),data=dat9)
summary(mod3)
RET = c(40, 42, 36, 35, 37,	40, 44, 46, 41, 39,	36, 40, 41, 38, 45)
CCT	= c(42, 39, 38, 44, 42,	41, 45, 40, 48, 46,	41, 39, 37, 44, 44)
BMOD = c(48, 44, 43, 48, 47,	41, 40, 48, 47, 44,	39, 44, 40, 44, 43)
ther = rep(c(rep(1,5),rep(2,5),rep(3,5)),3)
y = c(RET, CCT, BMOD)
Z = c(rep("RET",length(RET)), rep("CCT",length(CCT)), rep("BMOD",length(BMOD)))
dat = data.frame(method=Z, therapist=ther, response=y)
dat$therapist=as.factor(dat$therapist)
dat$method=as.factor(dat$method)
one.way = aov(response~method, data=dat)
two.way = aov(response~method+therapist, data=dat)
rep = aov(response~method+Error(therapist/method),data=dat)
summary(rep)
m2=lmer(response~method+(1|therapist),data=dat)
summary(m2)
str(dat)
mod3=aov(rating ~ strategy + Error(strategy/instructor),data=dat9)
summary(mod3)
mod3=aov(rating ~ strategy + Error(instructor/strategy),data=dat9)
summary(mod3)
mod3 = lmer(rating ~ strategy + (1|instructor), data=dat9); summary(mod3)
anova(mod3)
Anova(mod3,type=e)
Anova(mod3,type=3)
library(car)
Anova(mod3,type=e)
Anova(mod3,type=3)
mod3 = lmer(rating ~ =1+strategy + (1|instructor), data=dat9); summary(mod3)
mod3 = lmer(rating ~ -1+strategy + (1|instructor), data=dat9); summary(mod3)
mod3 = lmer(rating ~ strategy + (0|instructor), data=dat9); summary(mod3)
mod3 = lmer(rating ~ strategy + (strategy|instructor), data=dat9); summary(mod3)
mod3 = lmer(rating ~ strategy + (1|instructor), data=dat9); summary(mod3)
Anova(mod3)
Anova(mod3,type=3)
anova(mod)
anova(mod3)
mod3=aov(rating ~ strategy + Error(instructor/strategy),data=dat9)
summary(mod3)
anova(mod3)
Anova(mod3)
mod3 = lmer(rating ~ strategy + (1|instructor), data=dat9); summary(mod3)
anova(mod3)
str(dat9)
dat9
mod4=lmer(rating ~ strategy + (1|instructor), data=dat9);anova(mod4)
?ghlt
library(multcomp)
?glht
table(dat9$strategy)
glht(mod1, linfct=c(1/2, -1, 1/2))
glht(mod1, linfct=mcp(strategy=c(1/2, -1, 1/2)))
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1/2, -1, 1/2),conf.int=0.95)
tapply(dat9$rating,dat9$strategy,mean)
mean(c(39,42))
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(-1/2, 1, -1/2),conf.int=0.95)
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(-1/2, -1/2, 1),conf.int=0.95)
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1,0,01),conf.int=0.95)
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1,0,-1),conf.int=0.95)
options(digits=4)
tapply(dat9$rating,dat9$strategy,mean)
mean(c(39.89,42.00))
43.89-mean(c(39.89,42.00))
levels(dat9$strategy)
42.00 -38.89
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1,-1,0),conf.int=0.95)
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1,-1,1),conf.int=0.95)
library(gmodels)
fit.contrast(mod1, "strategy", coeff=c(1/2,-1,1/2),conf.int=0.95)
mean(dat9$rating[dat9$strategy!="Inquiry-based"])
mean(dat9$rating[dat9$strategy=="Inquiry-based"])
43.89-40.44
?map_dbl
?par
?plot
?quanteda.textstats::textstat_lexdiv
?quanteda.textstats::textstat_readability
?quanteda.sentiment::textstat_valence
str(dics[[1]])
names(new)
?nearZeroVar
?findLinearCombos
?textstat_lexdiv
dirname(rstudioapi::getActiveDocumentContext()$path)
path="~/Desktop/GitHub_local/tada"
fname=sapply(1:length(dim), function(x) paste0(path,"/glove",dim[x],"d"))
dim=c(50)
dim=c(50,100)
fname=sapply(1:length(dim), function(x) paste0(path,"/glove",dim[x],"d"))
fnames
fname
fname=sapply(1:length(dim), function(x) paste0(path,"/glove.",dim[x],"d.RData"))
fname
dim=c(50)
fname=sapply(1:length(dim), function(x) paste0(path,"/glove.",dim[x],"d.RData"))
fname[1]
load("~/Desktop/GitHub_local/tada/data/glove.50d.RData")
glove=t(glove.50d)
dim(glove)
glove=data.frame(t(glove.50d))
save(glove,file="data/glove.50d.RData")
tail(glove[,1:5])
glove=glove[-nrow(glove),]
save(glove,file="data/glove.50d.RData")
library(devtools)
library(roxygen2)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd("~/Desktop/GitHub_local/tada")
devtools::document()
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd("~/Desktop/GitHub_local/tada")
devtools::document()
devtools::document()
devtools::document()
glove.50d=glove
save(glove.50d,file="data/glove.50d.RData")
devtools::document()
devtools::document()
dim=50
fname=sapply(1:length(dim), function(x) paste0("glove.",dim[x],"d.RData"))
data(fname)
fname
?data
data(paste0("glove.",dim[x],"d.RData"))
data(cat(paste0("glove.",dim[x],"d.RData"))
)
fname
?mget
get(fname)
rm(glove,glove.50d)
data(glove.50d)
glove=glove.50d
save(glove,file="data/glove.50d.RData")
?switch
switch(50, 50="glove.50d")
switch(50, 50="glove.50d", 100="glove.100d")
ff <- gl(3,1, labels=LETTERS[3:1])
ff
ff[1]
for(i in c(-1:3, 9))  print(switch(i, 1, 2 , 3, 4))
for(i in c(1:4))  print(switch(i, 1, 2 , 3, 4))
for(i in c(0:3))  print(switch(i, 1, 2 , 3, 4))
switch(50, "glove.50d"=50, "glove.100d"=100)
print(switch(50, "glove.50d"=50, "glove.100d"=100))
?dplyr::case_when
?expr
?data
?try
try(dim)
fname=paste0("glove.",dim,"d")
rm(glove,glove.50d)
data(try(fname))
try(data(fname))
fname
try(data(glove.50d))
rm(glove)
try(cat("data(",fname, ")"))
?eval
eval(fname)
data(eval(fname))
cat(fname)
data(cat(fname))
data(eval(cat(fname)))
get(fname)
data(get(fname))
?data
data(list=fname)
rm(glove)
data(list=fname)
# Create .Rd file Documentation for all functions in folder "R"
# these files are needed to call function documentation like ?myfunction
# IMPORTANT: you need to have at least one function in your "R" folder to create any documentation
setwd("~/Desktop/GitHub_local/tada")
devtools::document()
load("~/Desktop/GitHub_local/tada/data/glove.50d.RData")
glove.50d=glove
save(glove.50d,file="data/glove.50d.RData")
devtools::document()
rm(glove)
glove<-get(fname)
rm(glove)
rm(glove.50d)
devtools::document()
setwd("..")
devtools::install("tada")
3
library(tada)
setwd("tada")
devtools::document()
setwd("..")
devtools::install("tada")
setwd("tada")
devtools::document()
setwd("..")
devtools::install("tada")
setwd("~/Desktop/GitHub_local/tada")
system("R CMD build --resave-data")
# Create PDF manual
system("R CMD Rd2pdf . --output=./manual.pdf --force")
devtools::document()
setwd("..")
devtools::install("tada")
